---
description: 
globs: 
alwaysApply: false
---
# AI Coach Integration Rule

This rule governs the integration of the AI Coach feature into Lichess. All contributors must reference the Product Definition Requirements (PDR) and follow the implementation steps outlined below.

## Reference Document
- The authoritative requirements and scope for the AI Coach are defined in the [AI_Coach_PDR.md](mdc:modules/coach/AI_Coach_PDR.md) file.

## Implementation Steps
1. **Technical & Architectural Planning**
   - Identify integration points for the AI Coach in offline games and analysis mode.
   - Ensure the coach is not available in online/rated play.
2. **API Research & Setup**
   - Review and set up the ElevenLabs API for voice (and text if needed).
   - Securely handle API keys.
3. **Board Interaction Capabilities**
   - Enable the coach to highlight squares, suggest moves, and play lines on the board.
4. **UI/UX Prototyping**
   - Design and implement UI components for chat, voice controls, and board overlays.
   - Define user flows for interacting with the coach.
5. **Backend & API Integration**
   - Integrate ElevenLabs API for voice synthesis.
   - Ensure privacy and session handling per the PDR.
6. **Frontend Implementation**
   - Build and connect UI components to backend endpoints.
   - Implement board interaction features.
7. **AI Coach Logic**
   - Develop or integrate advice, feedback, and pattern recognition logic.
   - Ensure advice is constructive and level-appropriate.
8. **Testing & Iteration**
   - Test in offline and analysis modes.
   - Gather feedback and iterate.
9. **Documentation & Launch**
   - Update documentation and reference the PDR in all related materials.

## Workflow, Planning, and Problem Solving Strategy

### PERSISTENCE
You are an agent - please keep going until the user's query is completely resolved, before ending your turn and yielding back to the user. Only terminate your turn when you are sure that the problem is solved.

### TOOL CALLING
If you are not sure about file content or codebase structure pertaining to the user's request, use your tools to read files and gather the relevant information: do NOT guess or make up an answer.

### PLANNING
You MUST plan extensively before each function call, and reflect extensively on the outcomes of the previous function calls. DO NOT do this entire process by making function calls only, as this can impair your ability to solve the problem and think insightfully.

Please always think step by step and carefully before proposing code changes. Please never modify any code that isn't immediately pertaining to the edit we are making. Please never guess at a solution. I would rather stop and discuss our options instead of guessing. We're a team!

### High-Level Problem Solving Strategy
1. **Deeply Understand the Problem**
   - Carefully read the issue and think hard about a plan to solve it before coding.
2. **Codebase Investigation**
   - Explore relevant files and directories.
   - Search for key functions, classes, or variables related to the issue.
   - Read and understand relevant code snippets.
   - Identify the root cause of the problem.
   - Validate and update your understanding continuously as you gather more context.
3. **Develop a Detailed Plan**
   - Outline a specific, simple, and verifiable sequence of steps to fix the problem.
   - Break down the fix into small, incremental changes.
4. **Making Code Changes**
   - Before editing, always read the relevant file contents or section to ensure complete context.
   - If a patch is not applied correctly, attempt to reapply it.
   - Make small, testable, incremental changes that logically follow from your investigation and plan.
5. **Debugging**
   - Make code changes only if you have high confidence they can solve the problem
   - When debugging, try to determine the root cause rather than addressing symptoms
   - Debug for as long as needed to identify the root cause and identify a fix
   - Use print statements, logs, or temporary code to inspect program state, including descriptive statements or error messages to understand what's happening
   - To test hypotheses, you can also add test statements or functions
   - Revisit your assumptions if unexpected behavior occurs.
6. **Final Verification**
   - Confirm the root cause is fixed.
   - Review your solution for logic correctness and robustness.
   - Iterate until you are extremely confident the fix is complete and all tests pass.
7. **Final Reflection and Additional Testing**
   - Reflect carefully on the original intent of the user and the problem statement.
   - Think about potential edge cases or scenarios that may not be covered by existing tests.
   - Write additional tests that would need to pass to fully validate the correctness of your solution.
   - Run these new tests and ensure they all pass.
   - Be aware that there are additional hidden tests that must also pass for the solution to be successful.
   - Do not assume the task is complete just because the visible tests pass; continue refining until you are confident the fix is robust and comprehensive.

## Rule
- All development, design, and dialogue regarding the AI Coach must reference the [AI_Coach_PDR.md](mdc:modules/coach/AI_Coach_PDR.md) and follow the steps above.
- Any changes to requirements or scope must be reflected in the PDR and this rule.
- This rule must be cited in all related pull requests, issues, and discussions.

